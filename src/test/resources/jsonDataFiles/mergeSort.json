{
   "compile": {
      "mainClass": "math.Calculator",
      "sourceFiles": [
         {
            "name": "Main.java",
            "contents": [
               "/**\n",
               " * Main class of the Java program. \n",
               " * \n",
               " */\n",
               " \n",
               "import java.util.Random;\n",
               "\n",
               "public class Main {\n",
               "\n",
               "    /**\n",
               "     * Test the Sorter class.\n",
               "     * Generates several arrays, asks the sorter class to sort them then\n",
               "     * prints out whether the arrays are sorted.\n",
               "     */\n",
               "    public static void main(String[] args) {\n",
               "        Random rand = new Random();\n",
               "        \n",
               "        // we print a heading and make it bigger using HTML formatting\n",
               "        System.out.println(\"-- Array Sorter --\");\n",
               "\n",
               "        // create the sorter\n",
               "        Sorter sorter = new Sorter();\n",
               "        \n",
               "        // we print a heading and make it bigger using HTML formatting\n",
               "        System.out.println(\"Sorting Random Array:\");\n",
               "\n",
               "        // initialize the random array and sort it\n",
               "        int[] randomArray = new int[4194304];\n",
               "        for (int i = 0; i < randomArray.length; i++) {\n",
               "            randomArray[i] = rand.nextInt();\n",
               "        }\n",
               "        \n",
               "        // Sort the array then check that it is actually sorted.\n",
               "        sorter.sort(randomArray);\n",
               "        checkSorted(randomArray);\n",
               "        \n",
               "        // we print a heading and make it bigger using HTML formatting\n",
               "        System.out.println(\"Sorting Sorted Array:\");\n",
               "\n",
               "        // initialize the array and sort it\n",
               "        int[] sortedArray = new int[1024];\n",
               "        for (int i = 0; i < sortedArray.length; i++) {\n",
               "            sortedArray[i] = i;\n",
               "        }\n",
               "        \n",
               "        // Sort the array then check that it is actually sorted.\n",
               "        sorter.sort(sortedArray);\n",
               "        checkSorted(sortedArray);\n",
               "        \n",
               "        \n",
               "        // we print a heading and make it bigger using HTML formatting\n",
               "        System.out.println(\"Sorting Reverse Sorted Array:\");\n",
               "\n",
               "        // initialize the array and sort it\n",
               "        for (int i = 0; i < sortedArray.length; i++) {\n",
               "            sortedArray[i] = sortedArray.length - i;\n",
               "        }\n",
               "        \n",
               "        // Sort the array then check that it is actually sorted.\n",
               "        sorter.sort(sortedArray);\n",
               "        checkSorted(sortedArray);\n",
               "\n",
               "        \n",
               "        // we print a heading and make it bigger using HTML formatting\n",
               "        System.out.println(\"Sorting Nearly Sorted Array:\");\n",
               "\n",
               "        // initialize the array\n",
               "        for (int i = 0; i < sortedArray.length; i++) {\n",
               "            sortedArray[i] = i;\n",
               "        }\n",
               "        \n",
               "        // Swap some elements\n",
               "        for (int i = 0; i < 10; i++) {\n",
               "            int a = rand.nextInt(sortedArray.length);\n",
               "            int b = rand.nextInt(sortedArray.length);\n",
               "            int c = sortedArray[a];\n",
               "            sortedArray[a] = sortedArray[b];\n",
               "            sortedArray[b] = c;\n",
               "        }\n",
               "        \n",
               "        // Sort the array then check that it is actually sorted.\n",
               "        sorter.sort(sortedArray);\n",
               "        checkSorted(sortedArray);\n",
               "\n",
               "    }\n",
               "    \n",
               "    /**\n",
               "     * Determines if an array is sorted, prints out a statement to that fact.\n",
               "     * @param arr an array to check\n",
               "     */\n",
               "    private static void checkSorted(int[] arr) {\n",
               "        boolean sorted = true;\n",
               "        for (int i = 0; i < arr.length - 2; i++) {\n",
               "            if (arr[i] > arr[i+1]) {\n",
               "                sorted = false;\n",
               "            }\n",
               "        }\n",
               "        \n",
               "        System.out.print(\"--- The array is \");\n",
               "        if (!sorted) {\n",
               "            System.out.print(\"not \");\n",
               "        }\n",
               "        System.out.println(\"sorted.\");\n",
               "    }\n",
               "}\n"
            ]
         },
         {
            "name": "Main.java",
            "contents": [
               "/**\n",
               " * This class provides functions to sort arrays.\n",
               " * \n",
               " */\n",
               " \n",
               "public class Sorter {\n",
               "\n",
               "    private int comparisons = 0;\n",
               "    private int swaps = 0;\n",
               "\n",
               "    \n",
               "    /**\n",
               "     * Sort an array.  The array passed in will be sorted after the method runs.\n",
               "     * \n",
               "     * @param arr the array to sort\n",
               "     */\n",
               "    public void sort(int[] arr) {\n",
               "        comparisons = 0;\n",
               "        swaps = 0;\n",
               "        \n",
               "        // Your task:\n",
               "        // - Prepare for merge sorting arr by:\n",
               "        //      - Setting up a temporary array for holding scratch data\n",
               "        //      - Calling mergeSort to divide and conquer the sorting task\n",
               "\n",
               "        // YOUR CODE HERE\n",
               "        \n",
               "        int[] temp = new int[arr.length];\n",
               "        mergeSort(arr, 0, arr.length - 1, temp);\n",
               "\n",
               "        System.out.println(comparisons + \" comparisons made.\");\n",
               "        System.out.println(swaps + \" swaps made.\");\n",
               "    }\n",
               "    \n",
               "    /**\n",
               "     * Sort a sub array.\n",
               "     * \n",
               "     * @param arr the array containing the sub array to sort\n",
               "     * @param beg the first index of the sub array to sort\n",
               "     * @param end the last index of the sub array to sort\n",
               "     * @param temp a scratch array to use for sorting\n",
               "     */\n",
               "    private void mergeSort(int arr[], int beg, int end, int[] temp) {\n",
               "        if (beg < end) {\n",
               "            int mid = (beg + end) / 2;\n",
               "            \n",
               "            mergeSort(arr, beg, mid, temp);\n",
               "            mergeSort(arr, mid + 1, end, temp);\n",
               "            merge(arr, beg, mid, end, temp);\n",
               "        }\n",
               "    }\n",
               "    \n",
               "    /**\n",
               "     * Merge an array with two sorted sub-arrays into a single, sorted array.\n",
               "     * The two sorted sub-arrays are contiguous in the array and the same size.\n",
               "     * \n",
               "     * @param arr An array containing two sorted sub-arrays.\n",
               "     * @param beg The beginning of the first sorted sub array\n",
               "     * @param mid The end of the first sorted sub array -- The second sorted sub\n",
               "     *            array begins at mid + 1.\n",
               "     * @param end The end of the second sorted sub array\n",
               "     * @param temp An uninitialized temporary array for storing data during the\n",
               "     *             merge.\n",
               "     */\n",
               "    public void merge(int[] arr, int beg, int mid, int end, int[] temp) {\n",
               "        // Your task:\n",
               "        // - Sort the sub arrays [beg..mid], [mid+1..end] into one sub array\n",
               "        //   [beg..end]\n",
               "        // - Make sure to keep track of the number of comparisons and \"swaps\"\n",
               "        \n",
               "            int i;\n",
               "            int j;\n",
               "            int k;\n",
               "            \n",
               "            for (i = beg; i <= mid; i++) {\n",
               "                swaps++;\n",
               "                temp[i] = arr[i];\n",
               "            }\n",
               "            for (i = mid + 1; i <= end; i++) {\n",
               "                swaps++;\n",
               "                j = end + mid + 1 - i;\n",
               "                temp[j] = arr[i];\n",
               "            }\n",
               "            \n",
               "            i = beg;\n",
               "            j = end;\n",
               "            \n",
               "            for (k = beg; k <= end; k++) {\n",
               "                comparisons++;\n",
               "                if (temp[i] < temp[j]) {\n",
               "                    arr[k] = temp[i];\n",
               "                    i++;\n",
               "                }\n",
               "                else {\n",
               "                    arr[k] = temp[j];\n",
               "                    j--;\n",
               "                }\n",
               "            }\n",
               "    }\n",
               "}\n"
            ]
         }
      ]
   },
   "test-type": "run"
}